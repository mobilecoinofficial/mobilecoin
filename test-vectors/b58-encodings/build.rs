use mc_account_keys::{AccountKey, RootIdentity};
use mc_api::printable::PrintableWrapper;
use mc_test_vectors_definitions::b58_encodings::*;
use mc_util_test_vector::write_jsonl;
use std::convert::{TryFrom, TryInto};

fn main() {
    write_jsonl("../vectors", || {
        (0..10)
            .map(|n| {
                let account_key = AccountKey::try_from(&RootIdentity::from(&[n; 32]))
                    .expect("Invalid root identity when creating AccountKey");
                let public_address = account_key.default_subaddress();
                let mut wrapper = PrintableWrapper::new();
                wrapper.set_public_address((&public_address).try_into().unwrap());
                let b58_encoded = wrapper.b58_encode().unwrap();
                B58EncodePublicAddressWithoutFog {
                    view_public_key: public_address.view_public_key().to_bytes(),
                    spend_public_key: public_address.spend_public_key().to_bytes(),
                    b58_encoded,
                }
            })
            .collect::<Vec<_>>()
    })
    .expect("Unable to write test vectors");

    write_jsonl("../vectors", || {
        (0..10)
            .map(|n| {
                let fog_authority_spki = vec![
                    0x30u8, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
                    0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82,
                    0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xaf, 0x07, 0x23, 0xf3, 0x6c, 0x1c,
                    0x2d, 0x3d, 0xbc, 0x73, 0xc0, 0x1c, 0xe3, 0x23, 0xe4, 0x5e, 0x77, 0x36, 0x36,
                    0x93, 0xb4, 0x6c, 0x9d, 0xf7, 0xbe, 0x27, 0xe6, 0x8d, 0x43, 0xf1, 0x4d, 0xd4,
                    0x99, 0x54, 0x0f, 0xfb, 0xc4, 0x33, 0x3d, 0x58, 0x7e, 0xcb, 0xf6, 0x83, 0x7d,
                    0xff, 0xa5, 0x59, 0x95, 0xcd, 0x0a, 0xb7, 0xb9, 0x80, 0x4f, 0x17, 0x2e, 0x51,
                    0xc7, 0xb0, 0xfc, 0x3a, 0xb9, 0x80, 0xd6, 0x2b, 0xc4, 0x72, 0xdd, 0xa1, 0xae,
                    0x8e, 0xe4, 0xe7, 0x36, 0xe5, 0xc7, 0x3a, 0x4f, 0xf4, 0x65, 0x67, 0x66, 0xec,
                    0x4b, 0xb0, 0xc7, 0x2a, 0xe3, 0x14, 0x23, 0x9d, 0xe4, 0x81, 0x4e, 0x8c, 0x35,
                    0x6e, 0x63, 0xa4, 0x84, 0x00, 0x26, 0xb0, 0x18, 0xb4, 0xec, 0x5c, 0x95, 0x77,
                    0x56, 0xf6, 0x1c, 0x6f, 0x9c, 0x8a, 0xef, 0xdd, 0xb4, 0x8b, 0x8f, 0x26, 0xfd,
                    0x8d, 0x39, 0x4d, 0x80, 0xec, 0x61, 0x84, 0xbd, 0xd4, 0x85, 0xa9, 0x46, 0x36,
                    0xf3, 0x33, 0x58, 0xa1, 0x00, 0xd7, 0xaf, 0x71, 0x78, 0x12, 0x4f, 0x21, 0x00,
                    0xc0, 0x01, 0x1c, 0xa2, 0x38, 0x0c, 0x34, 0x7f, 0xe2, 0xf7, 0x76, 0xa6, 0x29,
                    0xed, 0xee, 0xc0, 0x9e, 0x3c, 0x36, 0xd9, 0x93, 0x27, 0x9d, 0x88, 0x24, 0x42,
                    0x24, 0xcd, 0xce, 0xfc, 0xae, 0xc9, 0x8a, 0x3d, 0x17, 0x41, 0x40, 0xb2, 0x1e,
                    0x98, 0x83, 0xcb, 0xf2, 0x20, 0xd3, 0xea, 0xa9, 0xed, 0xed, 0x13, 0xfb, 0x79,
                    0xd7, 0x5b, 0xb1, 0xfb, 0x9d, 0xc4, 0x31, 0x5d, 0x2b, 0x99, 0x96, 0x56, 0x43,
                    0x2d, 0x16, 0x25, 0xee, 0xab, 0x19, 0x20, 0x14, 0xd8, 0x09, 0x6b, 0x22, 0x11,
                    0xf8, 0x75, 0x4d, 0x1a, 0x34, 0x2a, 0x59, 0xe9, 0x0c, 0x19, 0xde, 0xf1, 0x39,
                    0x18, 0xe0, 0xd7, 0x1e, 0xef, 0xe0, 0x76, 0xfd, 0xac, 0xef, 0xae, 0x2d, 0x73,
                    0x11, 0xdf, 0x8a, 0x78, 0x67, 0x87, 0xca, 0x77, 0x23, 0xdf, 0x61, 0x76, 0x68,
                    0x9c, 0x56, 0xa8, 0xe1, 0x36, 0xaf, 0x95, 0xa0, 0x53, 0xdd, 0x82, 0x1c, 0xc1,
                    0x82, 0x63, 0x5a, 0x5d, 0x16, 0x14, 0x2c, 0x28, 0x55, 0xe9, 0xca, 0x85, 0xa1,
                    0x97, 0x24, 0x20, 0x27, 0x0f, 0xff, 0xef, 0x80, 0xeb, 0x9b, 0xb9, 0x95, 0xfc,
                    0xe3, 0x9f, 0xd1, 0x6b, 0x88, 0x2e, 0x06, 0x86, 0xba, 0x66, 0xb2, 0xb5, 0x72,
                    0x29, 0x2b, 0x7f, 0x57, 0xb3, 0xc6, 0x3d, 0x71, 0x0d, 0xc0, 0x4d, 0x17, 0xe3,
                    0x63, 0x54, 0x09, 0x6f, 0x8e, 0x65, 0x3e, 0x88, 0x42, 0xa2, 0xcc, 0x21, 0xd7,
                    0x27, 0x68, 0xce, 0x0b, 0xdf, 0xb5, 0x32, 0xe6, 0x7f, 0xe0, 0x87, 0x0d, 0x4d,
                    0x10, 0x95, 0x26, 0x36, 0x60, 0x64, 0xe0, 0x61, 0xbb, 0x04, 0x90, 0x51, 0x2d,
                    0x7f, 0x17, 0x8e, 0x9e, 0x6a, 0xb3, 0x96, 0x09, 0x76, 0x54, 0x0d, 0x31, 0x6e,
                    0xae, 0xb4, 0x44, 0x7d, 0x53, 0xa6, 0x1e, 0x31, 0xaa, 0x9a, 0x47, 0xd4, 0x91,
                    0xc7, 0x35, 0x68, 0x75, 0x97, 0x6a, 0xa0, 0x62, 0x0d, 0x84, 0xee, 0x69, 0x1a,
                    0xef, 0x4b, 0x3b, 0x93, 0x38, 0x74, 0xf8, 0x19, 0x79, 0x03, 0x9d, 0x01, 0x9b,
                    0xa9, 0x51, 0xec, 0x35, 0x95, 0xa6, 0x6f, 0x83, 0xbc, 0x26, 0x53, 0x1e, 0xa4,
                    0x8b, 0x98, 0xea, 0x0f, 0x1b, 0xc9, 0xa0, 0x07, 0xd0, 0x89, 0x34, 0x0d, 0x6a,
                    0xde, 0xb2, 0xbe, 0xd2, 0x41, 0x1f, 0x39, 0xa3, 0x61, 0x79, 0x99, 0x8c, 0x32,
                    0x6d, 0x90, 0x55, 0x32, 0x7b, 0x83, 0x54, 0x9b, 0x06, 0x67, 0x53, 0x61, 0xed,
                    0x0b, 0xbb, 0xcd, 0x2e, 0x7e, 0x37, 0x5b, 0x8b, 0x4c, 0x9b, 0x0e, 0xaa, 0xc7,
                    0x1e, 0xab, 0x12, 0x4a, 0x6c, 0x26, 0x42, 0xe5, 0xda, 0x03, 0x36, 0xa8, 0x61,
                    0x7d, 0x5b, 0x7c, 0x93, 0x00, 0x14, 0x0c, 0x11, 0xec, 0xf5, 0xdd, 0x1d, 0x02,
                    0x03, 0x01, 0x00, 0x01,
                ];
                let account_key = AccountKey::try_from(&RootIdentity {
                    root_entropy: (&[n; 32]).into(),
                    fog_report_url: "fog://fog.unittest.mobilecoin.com".to_owned(),
                    fog_report_id: "".to_owned(),
                    fog_authority_spki,
                })
                .expect("Invalid root identity when creating fog account");

                let public_address = account_key.default_subaddress();
                let mut wrapper = PrintableWrapper::new();
                wrapper.set_public_address((&public_address).try_into().unwrap());
                let b58_encoded = wrapper.b58_encode().unwrap();
                B58EncodePublicAddressWithFog {
                    view_public_key: public_address.view_public_key().to_bytes(),
                    spend_public_key: public_address.spend_public_key().to_bytes(),
                    fog_report_url: public_address.fog_report_url().unwrap_or("").to_owned(),
                    fog_report_id: public_address.fog_report_id().unwrap_or("").to_owned(),
                    fog_authority_sig: public_address.fog_authority_sig().unwrap_or(&[]).to_owned(),
                    b58_encoded,
                }
            })
            .collect::<Vec<_>>()
    })
    .expect("Unable to write test vectors");
}
